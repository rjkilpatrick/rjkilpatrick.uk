---
const waveItems = 24;
---

<div id="loading-overlay">
  <div class="loading-wrapper">
    {Array(waveItems).fill(<div class="wave-element" />)}
  </div>
  <p>Just loading, one second!</p>
</div>

<style lang="scss">
  #loading-overlay {
    position: fixed;
    width: 100vw;
    height: 100vh;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 999;
    background-color: aliceblue;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    &.active {
      @media (prefers-reduced-motion: no-preference) {
        animation: 500ms ease-in forwards fadeout;
      }
    }
    &.display_none {
      display: none;
    }
  }

  .loading-wrapper {
    display: flex;
    flex-direction: row;
    align-items: flex-end;
    height: 120px;
    margin: 3rem;
  }

  @keyframes fadeout {
    from {
      height: 100vh;
      opacity: 1;
    }
    to {
      height: 0;
      opacity: 0;
    }
  }

  .wave-element {
    // Positioning
    width: 0.25rem;
    height: 4rem;
    margin: 0 0.25rem;

    background: black;

    // Animations
    transform-origin: top center;
    animation: cosine 2000ms linear infinite;

    // TODO: This is **awful** code, change this
    @for $i from 1 through 24 {
      &:nth-child(#{$i}) {
        animation-delay: 1.5 * (-24 + ($i - 1)) * 2000ms / 24;
      }
    }
  }

  @keyframes cosine {
    0% {
      transform: rotateX(0deg);
    }
    100% {
      transform: rotateX(360deg);
    }
  }
</style>
<script>
  window.onload = async () => {
    const overlay = document.querySelector("#loading-overlay");
    overlay.classList.add("active");

    // This is a hack to display none after the animation is run, because of
    // poor CSS. TODO: Remove this
    await new Promise((resolve) => setTimeout(resolve, 500)); // Hard-coded animation timer
    overlay.classList.add("display_none");
  };
</script>
