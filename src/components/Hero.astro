---
---

<div id="big-splash">
  <canvas id="canvas"></canvas>
  <div id="splash-overlay">
    <h1>John Kilpatrick</h1>
    <h2>Looking through optical fibres with structured light @ Exeter</h2>

    <ul class="social-icons">
      <li>
        <a href="https://github.com/rjkilpatrick">
          G
        </a>
      </li>
      <li>
        <a href="https://linkedin.com/in/rjkilpatrick">
         L
        </a>
      </li>
      <li>
        <a href="https://emps.exeter.ac.uk/physics-astronomy/staff/rjk217/">
          U
        </a>
      </li>
      <li>
        <a href="https://twitter.com/rjkilpatrick1">
          T
        </a>
      </li>
      <li>
        <a href="https://www.kaggle.com/johnkilpatrick">
          K
        </a>
      </li>
      <li>
        <a href="https://orcid.org/0000-0001-5119-6355">
          O
        </a>
      </li>
    </ul>

    <p>
      This is my virtual home on the w3. You can find my latest project, my
      research and what I've been doing in my free time.
    </p>
  </div>

  <div id="arrow-pointing-down">
    <a href="#content">
      <i class="fa fa-chevron-down"></i>
    </a>
  </div>
</div>
<script type="module">
  // # Copyright 2018, Google Inc.
  // # All rights reserved.
  // #
  // # Redistribution and use in source and binary forms, with or without
  // # modification, are permitted provided that the following conditions are
  // # met:
  // #
  // #     * Redistributions of source code must retain the above copyright
  // #       notice, this list of conditions and the following disclaimer.
  // #
  // #     * Redistributions in binary form must reproduce the above
  // #       copyright notice, this list of conditions and the following disclaimer
  // #       in the documentation and/or other materials provided with the
  // #       distribution.
  // #
  // #     * Neither the name of Google Inc. nor the names of their
  // #       contributors may be used to endorse or promote products derived from
  // #       this software without specific prior written permission.
  // #
  // # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  // # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  // # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  // # A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  // # OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  // # SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  // # LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  // # DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  // # THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  // # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  // # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  import * as THREE from "https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.module.min.js";

  function main() {
    const canvas = document.querySelector("#canvas");
    const renderer = new THREE.WebGLRenderer({ canvas });

    const fov = 75;
    const aspect = 2; // the canvas default
    const near = 0.1;
    const far = 5;
    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
    camera.position.z = 2;

    const scene = new THREE.Scene();

    {
      const color = 0xffffff;
      const intensity = 1;
      const light = new THREE.DirectionalLight(color, intensity);
      light.position.set(-1, 2, 4);
      scene.add(light);
    }

    const boxWidth = 1;
    const boxHeight = 1;
    const boxDepth = 1;
    const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);

    function makeInstance(geometry, color, x) {
      const material = new THREE.MeshPhongMaterial({ color });

      const cube = new THREE.Mesh(geometry, material);
      scene.add(cube);

      cube.position.x = x;

      return cube;
    }

    const cubes = [
      makeInstance(geometry, 0x44aa88, 0),
      makeInstance(geometry, 0x8844aa, -2),
      makeInstance(geometry, 0xaa8844, 2),
    ];

    function resizeRendererToDisplaySize(renderer) {
      const canvas = renderer.domElement;
      const width = canvas.clientWidth;
      const height = canvas.clientHeight;
      const needResize = canvas.width !== width || canvas.height !== height;
      if (needResize) {
        renderer.setSize(width, height, false);
      }
      return needResize;
    }

    function render(time) {
      time *= 0.001;

      if (resizeRendererToDisplaySize(renderer)) {
        const canvas = renderer.domElement;
        camera.aspect = canvas.clientWidth / canvas.clientHeight;
        camera.updateProjectionMatrix();
      }

      cubes.forEach((cube, ndx) => {
        const speed = 1 + ndx * 0.1;
        const rot = time * speed;
        cube.rotation.x = rot;
        cube.rotation.y = rot;
      });

      renderer.render(scene, camera);

      requestAnimationFrame(render);
    }

    requestAnimationFrame(render);
  }

  main();
</script>
